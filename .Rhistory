install.packages("shinydashboard")
shiny::runApp()
install.packages(c("plotly", "semantic.dashboard", "shiny.semantic"))
runApp('app')
runApp('1_app.R')
runApp('2_app.R')
runApp('2_app.R')
runApp()
?tabBox
?tabBox
runApp()
runApp()
runApp()
?dashboardPage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install_github("nik01010/dashboardthemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
?renderPlot
plotOutput()
?plotOutput
runApp()
runApp()
runApp()
runApp()
?column
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
column(4, box(title = "box1", width = NULL)),
column(4, box(title = "box2", width = NULL)),
column(4, box(title = "box3", width = NULL))
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
column(4, box(title = "box1", width = NULL)),
column(4, box(title = "box2", width = NULL)),
column(4, box(title = "box3", width = NULL))
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
runApp()
runApp()
fluidRow(
column(
4, plotOutput("plot1", height = 250)
),
column(
4, plotOutput("plot2", height = 250)
),
column(4, sliderInput("slider", "Number of observations:", 1, 100, 50))
)
?dashboardBody
runApp()
runApp()
runApp()
runApp()
runApp()
?column
if(interactive()){
library(shiny)
library(semantic.dashboard)
ui <- dashboardPage(
dashboardHeader(color = "blue"),
dashboardSidebar(side = "left", size = "thin", color = "teal",
sidebarMenu(
menuItem(tabName = "tab1", "Tab 1"),
menuItem(tabName = "tab2", "Tab 2"))),
dashboardBody(tabItems(
tabItem(tabName = "tab1", p("Tab 1")),
tabItem(tabName = "tab2", p("Tab 2"))))
)
server <- function(input, output) {
}
shinyApp(ui, server)
}
if(interactive()){
library(shiny)
library(semantic.dashboard)
ui <- dashboardPage(
dashboardHeader(color = "blue"),
dashboardSidebar(side = "left", size = "thin", color = "teal",
sidebarMenu(
menuItem(tabName = "tab1", "Tab 1"),
menuItem(tabName = "tab2", "Tab 2"))),
dashboardBody(tabItems(
tabItem(tabName = "tab1", p("Tab 1")),
tabItem(tabName = "tab2", p("Tab 2"))))
)
server <- function(input, output) {
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
?geom_line
x <- seq(0.01, .99, length.out = 100)
df <- data.frame(
x = rep(x, 2),
y = c(qlogis(x), 2 * qlogis(x)),
group = rep(c("a","b"),
each = 100)
)
p <- ggplot(df, aes(x=x, y=y, group=group))
# These work
p + geom_line(linetype = 2)
runApp()
runApp()
